class SubstackForm extends HTMLElement{constructor(){super(),this.errorSvg='<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false">\n        <path d="M15 9L9 15M9 9L15 15M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n      </svg>',this.emailErrorMessage="Please use a valid e-mail.",this.processErrorMessage="Something is not working, please try again.",this.successSvg='<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false">\n      <path d="M7.5 12L10.5 15L16.5 9M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n    </svg>',this.successMessage="",this.attachShadow({mode:"open"})}static get observedAttributes(){return["domain","max-width","button-width","input","submit"]}attributeChangedCallback(attr,oldVal,newVal){"domain"===attr&&(this.domain=newVal),"max-width"===attr&&(this.width=newVal),"button-width"===attr&&(this.buttonWidth=newVal),"input"===attr&&(this.input=newVal),"submit"===attr&&(this.submit=newVal)}getStyles(){return`<style>\n      :host {\n        --max-width: ${this.width};\n        --button-width: ${this.buttonWidth};\n        --brand-color: var(--substack-brand, #881010);\n        --button-text: var(--substack-button-text, #f5f5f5);\n        --success-bg: var(--substack-success-bg, #bbf7c7);\n        --success-text: var(--substack-success-text, #0d7221);\n        --error-bg: var(--substack-error-bg, #fce8e8);\n        --error-text: var(--substack-error-text, #720d0d);\n      }\n\n      :host *,\n      :host *::before,\n      :host *::after {\n        box-sizing: border-box;\n      }\n\n      .form > * + * {\n        margin-top: var(--flow-space, 1em);\n      }\n\n      .container {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 1em;\n        max-width: var(--max-width);\n        margin-inline: auto;\n      }\n\n      .container > :last-child {\n        display: flex;\n        align-items: flex-end;\n        flex-basis: var(--button-width);\n        flex-grow: 1;\n      }\n\n      .container > :first-child {\n        display: grid;\n        gap: 0.5em;\n        justify-items: start;\n        flex-basis: 0;\n        flex-grow: 999;\n        min-inline-size: 50%;\n      }\n\n      .label {\n        font-weight: bold;\n      }\n\n      .input {\n        padding-inline: 0.5ch;\n        width: 100%;\n        line-height: 2;\n        font-family: inherit;\n        font-size: inherit;\n        border: 2px solid var(--brand-color);\n      }\n\n      :is(.input, .submit):focus-visible {\n        outline: 2px solid var(--brand-color);\n        outline-offset: 2px;\n      }\n\n      .submit {\n        display: grid;\n        place-items: center;\n        padding: 0.5em 1em;\n        width: 100%;\n        color: var(--button-text);\n        background-color: var(--brand-color);\n        font-weight: bold;\n        font-family: inherit;\n        font-size: inherit;\n        border-radius: 1em;\n        border-color: transparent;\n      }\n\n      .loader {\n        text-align: center;\n      }\n\n      .loader:focus {\n        outline: none;\n      }\n\n      .loading {\n        aspect-ratio: 1;\n        margin-inline: auto;\n        width: 3rem;\n        border-radius: 50%;\n        border: 5px solid #eaf0f6;\n        border-top-color: var(--brand-color);\n        animation: spinner 2s linear infinite;\n      }\n\n      .status {\n        --status-bg: var(--success-bg);\n        --status-text: var(--success-text);\n        padding: 1em;\n        margin-inline: auto;\n        max-width: 50ch;\n        border: 2px solid var(--status-text);\n        background-color: var(--status-bg);\n        color: var(--status-text);\n        border-radius: 0.5em;\n      }\n\n      .status:focus {\n        outline: none;\n      }\n\n      .status:empty {\n        display: none;\n      }\n\n      .status[data-inline] {\n        margin-inline: 0;\n        width: fit-content;\n      }\n\n      .status.error {\n        --status-bg: var(--error-bg);\n        --status-text: var(--error-text)\n      }\n\n      .status svg {\n        width: 1em;\n        height: 1em;\n        vertical-align: middle;\n        display: inline-flex;\n        margin-right: 0.5ch;\n      }\n\n      @keyframes spinner {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n    </style>`}getTemplate(){const template=document.createElement("template");return template.innerHTML=`\n      ${this.getStyles()}\n      <form class="form" novalidate>\n        <div class="container">\n          <div>\n            <label class="label" for="substackForm">${this.input}</label>\n            <p class="status error" id="substackInputError" data-inline data-form-error></p>\n            <input class="input" id="substackForm" type="email" aria-describedby="substackInputError" required  />\n          </div>\n          <div>\n            <button class="submit" type="submit">${this.submit}</button>\n          </div>\n        </div>\n        <div role="status" aria-busy="true" class="loader flow" tabindex="-1">\n        </div>\n        <div role="status" class="status" tabindex="-1" data-form-state></div>\n      </form>`,template}render(){this.shadowRoot.innerHTML=this.getTemplate().innerHTML,this.innerHTML=""}connectedCallback(){this.render();const form=this.shadowRoot.querySelector("form"),email=this.shadowRoot.querySelector("input"),loading=this.shadowRoot.querySelector(".loader"),error=this.shadowRoot.querySelector("[data-form-error]"),announce=this.shadowRoot.querySelector("[data-form-state]");async function submitHandler(event){if(event.preventDefault(),!email.value)return error.innerHTML=`${this.errorSvg} ${this.emailErrorMessage}`,error.classList.remove("success"),error.classList.add("error"),void email.focus();try{announce.innerHTML="",error.innerHTML="",this.inputEmail=email.value,loading.innerHTML='<div class="loading"></div>\n        <p><b>Enviando...</b></p>',loading.focus();let request=await fetch("https://us-central1-substackapi.cloudfunctions.net/subscribe",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:this.inputEmail,domain:this.domain})}),response=await request.json();loading.innerHTML="",this.successMessage?announce.innerHTML=`<p>${this.successSvg} ${this.successMessage}</p>`:announce.innerHTML=`<p>${this.successSvg} Thanks for subscribing! We have sent you an email to <b>${this.inputEmail}</b> to complete the process.</p>`,announce.classList.remove("error"),announce.classList.add("success")}catch(error){loading.hidden=!0,announce.innerHTML=`<p>${this.errorSvg} ${this.processErrorMessage}</p>`,announce.classList.remove("success"),announce.classList.add("error")}}form.addEventListener("submit",submitHandler.bind(this))}}customElements.define("substack-form",SubstackForm);